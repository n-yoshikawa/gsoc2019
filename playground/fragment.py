import sys
from rdkit import Chem

print("Fragments generated by RDKit")

suppl = Chem.SDMolSupplier(sys.argv[1])
for mol in suppl:
    RotatableBond = Chem.MolFromSmarts('[!$(*#*)&!D1]-&!@[!$(*#*)&!D1]')
    rwmol = Chem.RWMol(mol)
    for begin, end in mol.GetSubstructMatches(RotatableBond):
        rwmol.RemoveBond(begin, end)
        beginAtom = rwmol.GetAtomWithIdx(begin)
        endAtom = rwmol.GetAtomWithIdx(end)
        if beginAtom.GetAtomicNum() != 6 and beginAtom.GetIsAromatic():
            beginAtom.SetNumExplicitHs(1)
            beginAtom.SetNoImplicit(True)
        if endAtom.GetAtomicNum() != 6 and endAtom.GetIsAromatic():
            endAtom.SetNumExplicitHs(1)
            endAtom.SetNoImplicit(True)
    fragments = Chem.rdmolops.GetMolFrags(rwmol.GetMol(), asMols=True)
    for fragment in fragments:
        if fragment.GetNumHeavyAtoms() < 5:
            continue
        print(Chem.MolToSmiles(fragment), Chem.MolToInchiKey(fragment))
        inchikey = Chem.inchi.MolToInchiKey(fragment)
        fragment.SetProp("_Name", inchikey)
        w = Chem.SDWriter('{}_RDKit.sdf'.format(inchikey))
        w.write(fragment)
        w.close()

from openbabel import openbabel as ob
from openbabel import pybel

print("\nFragments generated by Open Babel")

for mol in pybel.readfile("sdf", sys.argv[1]):
    # I used CopySubstructure to treat implicit H properly
    # https://sourceforge.net/p/openbabel/mailman/message/36322519/
    atomsToCopy = ob.OBBitVec()
    atomsToCopy.Clear()
    for atom in ob.OBMolAtomIter(mol.OBMol):
        atomsToCopy.SetBitOn(atom.GetIdx())
    bondsToExclude = ob.OBBitVec()
    bondsToExclude.Clear()
    for bond in ob.OBMolBondIter(mol.OBMol):
        if bond.IsRotor():
            bondsToExclude.SetBitOn(bond.GetIdx())
    copy = ob.OBMol()
    mol.OBMol.CopySubstructure(copy, atomsToCopy, bondsToExclude)
    fragments = copy.Separate()
    for fragment in fragments:
        if fragment.NumHvyAtoms() < 5:
            continue
        fragment = pybel.Molecule(fragment)
        inchikey = fragment.write('inchikey').rstrip()
        print(fragment.write('can').rstrip(), inchikey)
        fragment.OBMol.SetTitle(inchikey)
        fragment.write('sdf', '{}_OB.sdf'.format(inchikey), overwrite=True)
